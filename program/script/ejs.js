function hook_stdio(e,s){var t=e.write;return e.write=(e.write,function(e,t,r){s(e,t,r)}),function(){e.write=t}}function fixture(e){return read("test/fixtures/"+e,"utf8")}var ejs=require(".."),fs=require("fs"),read=fs.readFileSync,assert=require("assert"),path=require("path"),LRU=require("lru-cache");try{fs.mkdirSync(__dirname+"/tmp")}catch(e){if("EEXIST"!==e.code)throw e}var users=[];users.push({name:"geddy"}),users.push({name:"neil"}),users.push({name:"alex"}),suite("ejs.compile(str, options)",function(){test("compile to a function",function(){var e=ejs.compile("<p>yay</p>");assert.equal(e(),"<p>yay</p>")}),test("empty input works",function(){var e=ejs.compile("");assert.equal(e(),"")}),test("throw if there are syntax errors",function(){try{ejs.compile(fixture("fail.ejs"))}catch(e){assert.ok(e.message.indexOf("compiling ejs")>-1);try{ejs.compile(fixture("fail.ejs"),{filename:"fail.ejs"})}catch(e){return void assert.ok(e.message.indexOf("fail.ejs")>-1)}}throw new Error("no error reported when there should be")}),test("allow customizing delimiter local var",function(){var e;e=ejs.compile("<p><?= name ?></p>",{delimiter:"?"}),assert.equal(e({name:"geddy"}),"<p>geddy</p>"),e=ejs.compile("<p><:= name :></p>",{delimiter:":"}),assert.equal(e({name:"geddy"}),"<p>geddy</p>"),e=ejs.compile("<p><$= name $></p>",{delimiter:"$"}),assert.equal(e({name:"geddy"}),"<p>geddy</p>")}),test("default to using ejs.delimiter",function(){var e;ejs.delimiter="&",e=ejs.compile("<p><&= name &></p>"),assert.equal(e({name:"geddy"}),"<p>geddy</p>"),e=ejs.compile("<p><|= name |></p>",{delimiter:"|"}),assert.equal(e({name:"geddy"}),"<p>geddy</p>"),delete ejs.delimiter}),test("support custom escape function",function(){var e,s;e=function(e){return e?e.toUpperCase():""},s=ejs.compile("HELLO <%= name %>",{escape:e}),assert.equal(s({name:"world"}),"HELLO WORLD")}),test("strict mode works",function(){assert.equal(ejs.render(fixture("strict.ejs"),{},{strict:!0}),"true")})}),suite("client mode",function(){test("have a working client option",function(){var fn,str,preFn;fn=ejs.compile("<p><%= foo %></p>",{client:!0}),str=fn.toString(),process.env.running_under_istanbul||(eval("var preFn = "+str),assert.equal(preFn({foo:"bar"}),"<p>bar</p>"))}),test("support client mode without locals",function(){var fn,str,preFn;fn=ejs.compile('<p><%= "foo" %></p>',{client:!0}),str=fn.toString(),process.env.running_under_istanbul||(eval("var preFn = "+str),assert.equal(preFn(),"<p>foo</p>"))}),test("not include rethrow() in client mode if compileDebug is false",function(){var e=ejs.compile('<p><%= "foo" %></p>',{client:!0,compileDebug:!1});assert((e.toString().match(/rethrow/g)||[]).length<=1)}),test("support custom escape function in client mode",function(){var customEscape,fn,str;customEscape=function(e){return e?e.toUpperCase():""},fn=ejs.compile("HELLO <%= name %>",{escape:customEscape,client:!0}),str=fn.toString(),process.env.running_under_istanbul||(eval("var preFn = "+str),assert.equal(preFn({name:"world"}),"HELLO WORLD"))}),test("escape filename in errors in client mode",function(){assert.throws(function(){ejs.compile('<% throw new Error("whoops"); %>',{client:!0,filename:"<script>"})()},/Error: &lt;script&gt;/)})}),suite("ejs.render(str, dataAndOpts)",function(){test("render the template with data/opts passed together",function(){assert.equal(ejs.render("<p><?= foo ?></p>",{foo:"yay",delimiter:"?"}),"<p>yay</p>")}),test("disallow unsafe opts passed along in data",function(){assert.equal(ejs.render("<p><?= locals.foo ?></p>",{_with:!1,foo:"yay",delimiter:"?",localsName:"_"}),"<p>yay</p>")})}),suite("ejs.render(str, data, opts)",function(){test("render the template",function(){assert.equal(ejs.render("<p>yay</p>"),"<p>yay</p>")}),test("empty input works",function(){assert.equal(ejs.render(""),"")}),test("undefined renders nothing escaped",function(){assert.equal(ejs.render("<%= undefined %>"),"")}),test("undefined renders nothing raw",function(){assert.equal(ejs.render("<%- undefined %>"),"")}),test("null renders nothing escaped",function(){assert.equal(ejs.render("<%= null %>"),"")}),test("null renders nothing raw",function(){assert.equal(ejs.render("<%- null %>"),"")}),test("zero-value data item renders something escaped",function(){assert.equal(ejs.render("<%= 0 %>"),"0")}),test("zero-value data object renders something raw",function(){assert.equal(ejs.render("<%- 0 %>"),"0")}),test("accept locals",function(){assert.equal(ejs.render("<p><%= name %></p>",{name:"geddy"}),"<p>geddy</p>")}),test("accept locals without using with() {}",function(){assert.equal(ejs.render("<p><%= locals.name %></p>",{name:"geddy"},{_with:!1}),"<p>geddy</p>"),assert.throws(function(){ejs.render("<p><%= name %></p>",{name:"geddy"},{_with:!1})},/name is not defined/)}),test("accept custom name for locals",function(){ejs.localsName="it",assert.equal(ejs.render("<p><%= it.name %></p>",{name:"geddy"},{_with:!1}),"<p>geddy</p>"),assert.throws(function(){ejs.render("<p><%= name %></p>",{name:"geddy"},{_with:!1})},/name is not defined/),ejs.localsName="locals"}),test("support caching",function(){var e={cache:!0,filename:__dirname+"/tmp/render.ejs"},s=ejs.render("<p>Old</p>",{},e);assert.equal(s,"<p>Old</p>"),s=ejs.render("<p>New</p>",{},e),assert.equal(s,"<p>Old</p>")}),test("support LRU caching",function(){var e,s=ejs.cache,t={cache:!0,filename:__dirname+"/tmp/render.ejs"};ejs.cache=LRU(),e=ejs.render("<p>Old</p>",{},t),assert.equal(e,"<p>Old</p>"),e=ejs.render("<p>New</p>",{},t),assert.equal(e,"<p>Old</p>"),ejs.cache=s}),test("opts.context",function(){var e={foo:"FOO"},s=ejs.render("<%= this.foo %>",{},{context:e});assert.equal(s,e.foo)})}),suite("ejs.renderFile(path, [data], [options], fn)",function(){test("render a file",function(e){ejs.renderFile("test/fixtures/para.ejs",function(s,t){if(s)return e(s);assert.equal(t,"<p>hey</p>\n"),e()})}),test("accept locals",function(e){var s={name:"fonebone"},t={delimiter:"$"};ejs.renderFile("test/fixtures/user.ejs",s,t,function(s,t){if(s)return e(s);assert.equal(t,"<h1>fonebone</h1>\n"),e()})}),test("accept locals without using with() {}",function(e){var s={name:"fonebone"},t={delimiter:"$",_with:!1},r=0;ejs.renderFile("test/fixtures/user-no-with.ejs",s,t,function(s,t){if(s){if(2===r)return;return r=2,e(s)}assert.equal(t,"<h1>fonebone</h1>\n"),2===++r&&e()}),ejs.renderFile("test/fixtures/user.ejs",s,t,function(s){if(!s){if(2===r)return;return r=2,e(new Error("error not thrown"))}2===++r&&e()})}),test("not catch err thrown by callback",function(e){var s={name:"fonebone"},t={delimiter:"$"},r=0,n=require("domain").create();n.on("error",function(s){assert.equal(r,1),assert.equal(s.message,"Exception in callback"),e()}),n.run(function(){process.nextTick(function(){ejs.renderFile("test/fixtures/user.ejs",s,t,function(s){if(r++,s)return assert.notEqual(s.message,"Exception in callback"),e(s);throw new Error("Exception in callback")})})})}),test("support caching",function(e){var s=__dirname+"/tmp/renderFile.ejs",t={cache:!0};fs.writeFileSync(s,"<p>Old</p>"),ejs.renderFile(s,{},t,function(r,n){r&&e(r),fs.writeFileSync(s,"<p>New</p>"),assert.equal(n,"<p>Old</p>"),ejs.renderFile(s,{},t,function(s,t){s&&e(s),assert.equal(t,"<p>Old</p>"),e()})})}),test("opts.context",function(e){var s={foo:"FOO"};ejs.renderFile("test/fixtures/with-context.ejs",{},{context:s},function(t,r){if(t)return e(t);assert.equal(r,s.foo+"\n"),e()})}),test("support express multiple views folders, falls back to second if first is not available",function(e){var s={viewsText:"test",includePath:"views-include.ejs",settings:{views:[path.join(__dirname,"fixtures/nonexistent-folder"),path.join(__dirname,"fixtures")]}};ejs.renderFile(path.join(__dirname,"fixtures/views.ejs"),s,function(s,t){assert.ifError(s),assert.equal("<div><p>global test</p>\n</div>\n",t),e()})}),test("support express multiple views folders, falls back to second if first is not available (include preprocessor)",function(e){var s={viewsText:"test",settings:{views:[path.join(__dirname,"fixtures/nonexistent-folder"),path.join(__dirname,"fixtures")]}};ejs.renderFile(path.join(__dirname,"fixtures/views-old.ejs"),s,function(s,t){assert.ifError(s),assert.equal("<div><p>global test</p>\n</div>\n",t),e()})}),test("looks relative to the containing file first (include preprocessor)",function(e){var s={viewsText:"test",settings:{views:[path.join(__dirname,"fixtures/views"),path.join(__dirname,"fixtures")]}};ejs.renderFile(path.join(__dirname,"fixtures/views-old.ejs"),s,function(s,t){assert.ifError(s),assert.equal("<div><p>global test</p>\n</div>\n",t),e()})}),test("can reference by paths with directory names",function(e){var s={viewsText:"test",includePath:"views/views-include.ejs",settings:{views:[path.join(__dirname,"fixtures/views"),path.join(__dirname,"fixtures")]}};ejs.renderFile(path.join(__dirname,"fixtures/views.ejs"),s,function(s,t){assert.ifError(s),assert.equal("<div><p>custom test</p>\n</div>\n",t),e()})})}),suite("cache specific",function(){test("`clearCache` work properly",function(){var e="<p>Old</p>",s={cache:!0,filename:__dirname+"/tmp/clearCache.ejs"},t=ejs.render("<p>Old</p>",{},s);assert.equal(t,e),ejs.clearCache(),e="<p>New</p>",t=ejs.render("<p>New</p>",{},s),assert.equal(t,e)}),test("`clearCache` work properly, LRU",function(){var e,s="<p>Old</p>",t=ejs.cache,r={cache:!0,filename:__dirname+"/tmp/clearCache.ejs"};ejs.cache=LRU(),e=ejs.render("<p>Old</p>",{},r),assert.equal(e,s),ejs.clearCache(),s="<p>New</p>",e=ejs.render("<p>New</p>",{},r),assert.equal(e,s),ejs.cache=t}),test("LRU with cache-size 1",function(){var e,s,t,r=ejs.cache;ejs.cache=LRU(1),e={cache:!0,filename:__dirname+"/tmp/render1.ejs"},s=ejs.render("<p>File1</p>",{},e),t="<p>File1</p>",assert.equal(s,t),e={cache:!0,filename:__dirname+"/tmp/render1.ejs"},s=ejs.render("<p>ChangedFile1</p>",{},e),t="<p>File1</p>",assert.equal(s,t),e={cache:!0,filename:__dirname+"/tmp/render2.ejs"},s=ejs.render("<p>File2</p>",{},e),t="<p>File2</p>",assert.equal(s,t),e={cache:!0,filename:__dirname+"/tmp/render1.ejs"},s=ejs.render("<p>ChangedFile1</p>",{},e),t="<p>ChangedFile1</p>",assert.equal(s,t),ejs.cache=r})}),suite("<%",function(){test("without semicolons",function(){assert.equal(ejs.render(fixture("no.semicolons.ejs")),fixture("no.semicolons.html"))})}),suite("<%=",function(){test("should not throw an error with a // comment on the final line",function(){assert.equal(ejs.render("<%=\n// a comment\nname\n// another comment %>",{name:"&nbsp;<script>"}),"&amp;nbsp;&lt;script&gt;")}),test("escape &amp;<script>",function(){assert.equal(ejs.render("<%= name %>",{name:"&nbsp;<script>"}),"&amp;nbsp;&lt;script&gt;")}),test("should escape '",function(){assert.equal(ejs.render("<%= name %>",{name:"The Jones's"}),"The Jones&#39;s")}),test("should escape &foo_bar;",function(){assert.equal(ejs.render("<%= name %>",{name:"&foo_bar;"}),"&amp;foo_bar;")}),test("should accept custom function",function(){assert.equal(ejs.render("<%= name %>",{name:"The Jones's"},{escape:function(e){return e?e.toUpperCase():""}}),"THE JONES'S")})}),suite("<%-",function(){test("should not throw an error with a // comment on the final line",function(){assert.equal(ejs.render("<%-\n// a comment\nname\n// another comment %>",{name:"&nbsp;<script>"}),"&nbsp;<script>")}),test("not escape",function(){assert.equal(ejs.render("<%- name %>",{name:"<script>"}),"<script>")}),test("terminate gracefully if no close tag is found",function(){try{throw ejs.compile("<h1>oops</h1><%- name ->"),new Error("Expected parse failure")}catch(e){assert.ok(e.message.indexOf("Could not find matching close tag for")>-1)}})}),suite("%>",function(){test("produce newlines",function(){assert.equal(ejs.render(fixture("newlines.ejs"),{users:users}),fixture("newlines.html"))}),test("works with `-%>` interspersed",function(){assert.equal(ejs.render(fixture("newlines.mixed.ejs"),{users:users}),fixture("newlines.mixed.html"))}),test("consecutive tags work",function(){assert.equal(ejs.render(fixture("consecutive-tags.ejs")),fixture("consecutive-tags.html"))})}),suite("-%>",function(){test("not produce newlines",function(){assert.equal(ejs.render(fixture("no.newlines.ejs"),{users:users}),fixture("no.newlines.html"))}),test("stack traces work",function(){try{ejs.render(fixture("no.newlines.error.ejs"))}catch(e){if(e.message.indexOf(">> 4| <%= qdata %>")>-1)return;throw e}throw new Error("Expected ReferenceError")}),test("works with unix style",function(){var e;e=ejs.compile("<ul><% -%>\n<% users.forEach(function(user){ -%>\n<li><%= user.name -%></li>\n<% }) -%>\n</ul><% -%>\n"),assert.equal(e({users:users}),"<ul><li>geddy</li>\n<li>neil</li>\n<li>alex</li>\n</ul>")}),test("works with windows style",function(){var e;e=ejs.compile("<ul><% -%>\r\n<% users.forEach(function(user){ -%>\r\n<li><%= user.name -%></li>\r\n<% }) -%>\r\n</ul><% -%>\r\n"),assert.equal(e({users:users}),"<ul><li>geddy</li>\r\n<li>neil</li>\r\n<li>alex</li>\r\n</ul>")})}),suite("<%%",function(){test("produce literals",function(){assert.equal(ejs.render('<%%- "foo" %>'),'<%- "foo" %>')}),test("work without an end tag",function(){assert.equal(ejs.render("<%%"),"<%"),assert.equal(ejs.render(fixture("literal.ejs"),{},{delimiter:" "}),fixture("literal.html"))})}),suite("%%>",function(){test("produce literal",function(){assert.equal(ejs.render("%%>"),"%>"),assert.equal(ejs.render("  >",{},{delimiter:" "})," >")})}),suite("<%_ and _%>",function(){test("slurps spaces and tabs",function(){assert.equal(ejs.render(fixture("space-and-tab-slurp.ejs"),{users:users}),fixture("space-and-tab-slurp.html"))})}),suite("single quotes",function(){test("not mess up the constructed function",function(){assert.equal(ejs.render(fixture("single-quote.ejs")),fixture("single-quote.html"))})}),suite("double quotes",function(){test("not mess up the constructed function",function(){assert.equal(ejs.render(fixture("double-quote.ejs")),fixture("double-quote.html"))})}),suite("backslashes",function(){test("escape",function(){assert.equal(ejs.render(fixture("backslash.ejs")),fixture("backslash.html"))})}),suite("messed up whitespace",function(){test("work",function(){assert.equal(ejs.render(fixture("messed.ejs"),{users:users}),fixture("messed.html"))})}),suite("exceptions",function(){test("produce useful stack traces",function(){try{ejs.render(fixture("error.ejs"),{},{filename:"error.ejs"})}catch(e){return assert.equal(e.path,"error.ejs"),void assert.equal(e.stack.split("\n").slice(0,8).join("\n"),fixture("error.out"))}throw new Error("no error reported when there should be")}),test("not include fancy stack info if compileDebug is false",function(){try{ejs.render(fixture("error.ejs"),{},{filename:"error.ejs",compileDebug:!1})}catch(e){return assert.ok(!e.path),void assert.notEqual(e.stack.split("\n").slice(0,8).join("\n"),fixture("error.out"))}throw new Error("no error reported when there should be")});var e=null;test("log JS source when debug is set",function(s){var t="",r=!1;e=hook_stdio(process.stdout,function(n){if(t+=n,!r)return t.indexOf("__output")?(r=!0,e(),e=null,s()):void 0}),ejs.render(fixture("hello-world.ejs"),{},{debug:!0})}),test("escape filename in errors",function(){assert.throws(function(){ejs.render('<% throw new Error("whoops"); %>',{},{filename:"<script>"})},/Error: &lt;script&gt;/)}),test("filename in errors uses custom escape",function(){assert.throws(function(){ejs.render('<% throw new Error("whoops"); %>',{},{filename:"<script>",escape:function(){return"zooby"}})},/Error: zooby/)}),teardown(function(){e&&(e(),e=null)})}),suite("rmWhitespace",function(){test("works",function(){assert.equal(ejs.render(fixture("rmWhitespace.ejs"),{},{rmWhitespace:!0}),fixture("rmWhitespace.html"))})}),suite("include()",function(){test("include ejs",function(){assert.equal(ejs.render(fixture("include-simple.ejs"),{},{filename:"test/fixtures/include-simple.ejs"}),fixture("include-simple.html"))}),test("include and escape ejs",function(){assert.equal(ejs.render(fixture("include-escaped.ejs"),{},{filename:"test/fixtures/include-escaped.ejs"}),fixture("include-escaped.html"))}),test("include in expression ejs",function(){assert.equal(ejs.render(fixture("include-expression.ejs"),{},{filename:"test/fixtures/include-expression.ejs"}),fixture("include-expression.html"))}),test("include ejs fails without `filename`",function(){try{ejs.render(fixture("include-simple.ejs"))}catch(e){return void assert.ok(e.message.indexOf("Could not find")>-1)}throw new Error("expected inclusion error")}),test("strips BOM",function(){assert.equal(ejs.render('<%- include("fixtures/includes/bom.ejs") %>',{},{filename:path.join(__dirname,"f.ejs")}),"<p>This is a file with BOM.</p>\n")}),test("include ejs with locals",function(){assert.equal(ejs.render(fixture("include.ejs"),{pets:users},{filename:"test/fixtures/include.ejs",delimiter:"@"}),fixture("include.html"))}),test("include ejs with absolute path and locals",function(){assert.equal(ejs.render(fixture("include-abspath.ejs"),{dir:path.join(__dirname,"fixtures"),pets:users,path:path},{filename:"test/fixtures/include-abspath.ejs",delimiter:"@"}),fixture("include.html"))}),test("include ejs with set root path",function(){var e=path.join(__dirname,"fixtures");assert.equal(ejs.render(fixture("include-root.ejs"),{pets:users},{filename:"test/fixtures/include-root.ejs",delimiter:"@",root:e}),fixture("include.html"))}),test("work when nested",function(){assert.equal(ejs.render(fixture("menu.ejs"),{pets:users},{filename:"test/fixtures/menu.ejs"}),fixture("menu.html"))}),test("work with a variable path",function(){assert.equal(ejs.render(fixture("menu.ejs"),{pets:users,varPath:"includes/menu-item"},{filename:"test/fixtures/menu_var.ejs"}),fixture("menu.html"))}),test("include arbitrary files as-is",function(){assert.equal(ejs.render(fixture("include.css.ejs"),{pets:users},{filename:"test/fixtures/include.css.ejs"}),fixture("include.css.html"))}),test("pass compileDebug to include",function(){var e;e=ejs.compile(fixture("include.ejs"),{filename:"test/fixtures/include.ejs",delimiter:"@",compileDebug:!1});try{e({foo:"asdf"})}catch(e){return assert.equal(e.message,"pets is not defined"),void assert.ok(!e.path)}throw new Error("no error reported when there should be")}),test("is dynamic",function(){fs.writeFileSync(__dirname+"/tmp/include.ejs","<p>Old</p>");var e={filename:"test/fixtures/include_cache.ejs"},s=ejs.compile(fixture("include_cache.ejs"),e);assert.equal(s(),"<p>Old</p>\n"),fs.writeFileSync(__dirname+"/tmp/include.ejs","<p>New</p>"),assert.equal(s(),"<p>New</p>\n")}),test("support caching",function(){fs.writeFileSync(__dirname+"/tmp/include.ejs","<p>Old</p>");var e={cache:!0,filename:"test/fixtures/include_cache.ejs"},s=ejs.render(fixture("include_cache.ejs"),{},e),t=fixture("include_cache.html");assert.equal(s,t),s=ejs.render(fixture("include_cache.ejs"),{},e),assert.equal(s,t),fs.writeFileSync(__dirname+"/tmp/include.ejs","<p>New</p>"),s=ejs.render(fixture("include_cache.ejs"),{},e),assert.equal(s,t)}),test("handles errors in included file",function(){try{ejs.render('<%- include("fixtures/include-with-error") %>',{},{filename:path.join(__dirname,"f.ejs")})}catch(e){return void assert.ok(e.message.indexOf("foobar is not defined")>-1)}throw new Error("expected inclusion error")})}),suite("preprocessor include",function(){test("work",function(){assert.equal(ejs.render(fixture("include_preprocessor.ejs"),{pets:users},{filename:"test/fixtures/include_preprocessor.ejs",delimiter:"@"}),fixture("include_preprocessor.html"))}),test("no false positives",function(){assert.equal(ejs.render("<% %> include foo <% %>")," include foo ")}),test("fails without `filename`",function(){try{ejs.render(fixture("include_preprocessor.ejs"),{pets:users},{delimiter:"@"})}catch(e){return void assert.ok(e.message.indexOf("Could not find")>-1)}throw new Error("expected inclusion error")}),test("strips BOM",function(){assert.equal(ejs.render("<% include fixtures/includes/bom.ejs %>",{},{filename:path.join(__dirname,"f.ejs")}),"<p>This is a file with BOM.</p>\n")}),test("work when nested",function(){assert.equal(ejs.render(fixture("menu_preprocessor.ejs"),{pets:users},{filename:"test/fixtures/menu_preprocessor.ejs"}),fixture("menu_preprocessor.html"))}),test("tracks dependency correctly",function(){var e=ejs.compile(fixture("menu_preprocessor.ejs"),{filename:"test/fixtures/menu_preprocessor.ejs"});assert(e.dependencies.length)}),test("include arbitrary files as-is",function(){assert.equal(ejs.render(fixture("include_preprocessor.css.ejs"),{pets:users},{filename:"test/fixtures/include_preprocessor.css.ejs"}),fixture("include_preprocessor.css.html"))}),test("pass compileDebug to include",function(){var e;e=ejs.compile(fixture("include_preprocessor.ejs"),{filename:"test/fixtures/include_preprocessor.ejs",delimiter:"@",compileDebug:!1});try{e({foo:"asdf"})}catch(e){return assert.equal(e.message,"pets is not defined"),void assert.ok(!e.path)}throw new Error("no error reported when there should be")}),test("is static",function(){fs.writeFileSync(__dirname+"/tmp/include_preprocessor.ejs","<p>Old</p>");var e={filename:"test/fixtures/include_preprocessor_cache.ejs"},s=ejs.compile(fixture("include_preprocessor_cache.ejs"),e);assert.equal(s(),"<p>Old</p>\n"),fs.writeFileSync(__dirname+"/tmp/include_preprocessor.ejs","<p>New</p>"),assert.equal(s(),"<p>Old</p>\n")}),test("support caching",function(){fs.writeFileSync(__dirname+"/tmp/include_preprocessor.ejs","<p>Old</p>");var e={cache:!0,filename:"test/fixtures/include_preprocessor_cache.ejs"},s=ejs.render(fixture("include_preprocessor_cache.ejs"),{},e),t=fixture("include_preprocessor_cache.html");assert.equal(s,t),fs.writeFileSync(__dirname+"/tmp/include_preprocessor.ejs","<p>New</p>"),s=ejs.render(fixture("include_preprocessor_cache.ejs"),{},e),assert.equal(s,t)}),test("whitespace slurp and rmWhitespace work",function(){var e=fixture("include_preprocessor_line_slurp.ejs"),s=fixture("include_preprocessor_line_slurp.html"),t={rmWhitespace:!0,filename:"test/fixtures/include_preprocessor_line_slurp.ejs"};assert.equal(ejs.render(e,{},t),s)}),test("handles errors in included file",function(){try{ejs.render("<%- include fixtures/include-with-error %>",{},{filename:path.join(__dirname,"f.ejs")})}catch(e){return void assert.ok(e.message.indexOf("foobar is not defined")>-1)}throw new Error("expected inclusion error")})}),suite("comments",function(){test("fully render with comments removed",function(){assert.equal(ejs.render(fixture("comments.ejs")),fixture("comments.html"))})}),suite("require",function(){test("allow ejs templates to be required as node modules",function(){var e=require(__dirname+"/fixtures/menu_preprocessor.ejs");process.env.running_under_istanbul||assert.equal(e({filename:"test/fixtures/include_preprocessor.ejs",pets:users}),fixture("menu_preprocessor.html"))})}),suite("test fileloader",function(){var e=function(e){return"myFileLoad: "+fs.readFileSync(e)};test("test custom fileload",function(s){ejs.fileLoader=e,ejs.renderFile("test/fixtures/para.ejs",function(e,t){if(e)return s(e);assert.equal(t,"myFileLoad: <p>hey</p>\n"),s()})})}),suite("examples",function(){function e(){}fs.readdirSync("examples").forEach(function(s){/\.js$/.test(s)&&suite(s,function(){test("doesn't throw any errors",function(){var t=hook_stdio(process.stderr,e),r=hook_stdio(process.stdout,e);try{require("../examples/"+s)}catch(e){throw r(),t(),e}r(),t()})})})}),suite("meta information",function(){test("has a version",function(){assert.strictEqual(ejs.VERSION,require("../package.json").version)}),test("had a name",function(){assert.strictEqual(ejs.name,"ejs")})});